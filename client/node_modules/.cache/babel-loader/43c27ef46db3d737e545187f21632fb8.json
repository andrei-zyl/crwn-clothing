{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth, additinalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additinalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOutStart() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} //////\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additinalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n  /*try{\r\n      const {user} = yield auth.createUserWithEmailAndPassword(email, password);\r\n      try{\r\n          const userRef = yield call(createUserProfileDocument, user, {displayName});\r\n          const userSnapshot = yield userRef.get();\r\n          yield put(signUpSuccess({id: userSnapshot.id, ...userSnapshot.data()})); \r\n      }catch(error){\r\n          yield put(signUpFailure(error));\r\n      } \r\n  }catch(error){\r\n      yield put(signUpFailure(error));\r\n  }*/\n\n} //////\n\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additinalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additinalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutStart);\n} ///\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n} ///\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/User/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapshotFromUserAuth","userAuth","additinalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOutStart","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\nimport UserActionTypes from './user.types';\r\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils';\r\nimport {signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure} from './user.actions';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additinalData){\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth, additinalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data()})); \r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle(){\r\n    try{\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload: {email, password}}){\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user); \r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n    try{\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return\r\n\r\n        yield getSnapshotFromUserAuth(userAuth)\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signOutStart(){\r\n    try{\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    }catch(error){\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n//////\r\nexport function* signUp({payload: {email, password, displayName}}){\r\n    try{\r\n        const {user} = yield auth.createUserWithEmailAndPassword(email, password);\r\n        yield put(signUpSuccess({user, additinalData: {displayName}}))\r\n    }\r\n    catch(error){\r\n        yield put(signUpFailure(error));\r\n    }\r\n    \r\n    \r\n    /*try{\r\n        const {user} = yield auth.createUserWithEmailAndPassword(email, password);\r\n        try{\r\n            const userRef = yield call(createUserProfileDocument, user, {displayName});\r\n            const userSnapshot = yield userRef.get();\r\n            yield put(signUpSuccess({id: userSnapshot.id, ...userSnapshot.data()})); \r\n        }catch(error){\r\n            yield put(signUpFailure(error));\r\n        } \r\n    }catch(error){\r\n        yield put(signUpFailure(error));\r\n    }*/\r\n}\r\n//////\r\n\r\nexport function* signInAfterSignUp({payload: {user, additinalData}}){\r\n    yield getSnapshotFromUserAuth(user, additinalData);\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutStart)\r\n}\r\n\r\n///\r\nexport function* onSignUpStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n}\r\n///\r\nexport function* onSignUpSuccess(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\nexport function* userSagas(){\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart), \r\n        call(onCheckUserSession), \r\n        call(onSignOutStart), \r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)])\r\n\r\n}"]},"metadata":{},"sourceType":"module"}